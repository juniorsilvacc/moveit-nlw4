{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/juniorsilva/Documentos/PROJETOS GITHUB/moveit-nlw4/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/juniorsilva/Documentos/PROJETOS GITHUB/moveit-nlw4/src/components/Countdown.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { CountdownContext } from \"../contexts/CountdownContext\";\nimport styles from '../styles/components/Countdown.module.css';\nexport function Countdown() {\n  _s();\n\n  var _useContext = useContext(CountdownContext),\n      minutes = _useContext.minutes,\n      seconds = _useContext.seconds,\n      hasFinished = _useContext.hasFinished,\n      isActive = _useContext.isActive,\n      startCountdown = _useContext.startCountdown,\n      resetCountdown = _useContext.resetCountdown; // Transformar minutes e secunds em String\n  // padStart -> Se não tiver 2 caracter adicione um 0\n  // split -> reparti em duas strings por exemplo: '2' '5'\n\n\n  var _String$padStart$spli = String(minutes).padStart(2, '0').split(''),\n      _String$padStart$spli2 = _slicedToArray(_String$padStart$spli, 2),\n      minuteLeft = _String$padStart$spli2[0],\n      minuteRight = _String$padStart$spli2[1];\n\n  var _String$padStart$spli3 = String(seconds).padStart(2, '0').split(''),\n      _String$padStart$spli4 = _slicedToArray(_String$padStart$spli3, 2),\n      secondLeft = _String$padStart$spli4[0],\n      secondRight = _String$padStart$spli4[1];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.countdownContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), hasFinished ? /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: true,\n      type: \"button\",\n      className: styles.countdownButton,\n      onClick: resetCountdown,\n      children: \"Ciclo encerrado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isActive ? /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"\".concat(styles.countdownButton, \" \").concat(styles.countdownButtonActive) // Quando clicar no button ativar a função resetCountdown\n        ,\n        onClick: resetCountdown,\n        children: \"Abandonar ciclo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: styles.countdownButton // Quando clicar no button ativar a função startCountDown\n        ,\n        onClick: startCountdown,\n        children: \"Iniciar um ciclo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Countdown, \"3dU7afyGeCQUuvAgWXDfywqa4hM=\");\n\n_c = Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["/home/juniorsilva/Documentos/PROJETOS GITHUB/moveit-nlw4/src/components/Countdown.tsx"],"names":["useContext","CountdownContext","styles","Countdown","minutes","seconds","hasFinished","isActive","startCountdown","resetCountdown","String","padStart","split","minuteLeft","minuteRight","secondLeft","secondRight","countdownContainer","countdownButton","countdownButtonActive"],"mappings":";;;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AACA,OAAOC,MAAP,MAAmB,2CAAnB;AAEA,OAAO,SAASC,SAAT,GAAoB;AAAA;;AAAA,oBASfH,UAAU,CAACC,gBAAD,CATK;AAAA,MAGnBG,OAHmB,eAGnBA,OAHmB;AAAA,MAInBC,OAJmB,eAInBA,OAJmB;AAAA,MAKnBC,WALmB,eAKnBA,WALmB;AAAA,MAMlBC,QANkB,eAMlBA,QANkB;AAAA,MAOlBC,cAPkB,eAOlBA,cAPkB;AAAA,MAQlBC,cARkB,eAQlBA,cARkB,EAWvB;AACA;AACA;;;AAbuB,8BAcWC,MAAM,CAACN,OAAD,CAAN,CAAgBO,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAdX;AAAA;AAAA,MAchBC,UAdgB;AAAA,MAcJC,WAdI;;AAAA,+BAeWJ,MAAM,CAACL,OAAD,CAAN,CAAgBM,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAfX;AAAA;AAAA,MAehBG,UAfgB;AAAA,MAeJC,WAfI;;AAiBvB,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEd,MAAM,CAACe,kBAAvB;AAAA,8BACI;AAAA,gCACI;AAAA,oBAAOJ;AAAP;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA,gCACI;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAaKV,WAAW,gBACR;AACA,MAAA,QAAQ,MADR;AAEA,MAAA,IAAI,EAAC,QAFL;AAGA,MAAA,SAAS,EAAEJ,MAAM,CAACgB,eAHlB;AAIA,MAAA,OAAO,EAAET,cAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADQ,gBAUR;AAAA,gBACKF,QAAQ,gBACT;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,SAAS,YAAKL,MAAM,CAACgB,eAAZ,cAA+BhB,MAAM,CAACiB,qBAAtC,CAFb,CAGI;AAHJ;AAII,QAAA,OAAO,EAAEV,cAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADS,gBAUT;AACI,QAAA,IAAI,EAAC,QADT;AAEI,QAAA,SAAS,EAAEP,MAAM,CAACgB,eAFtB,CAGI;AAHJ;AAII,QAAA,OAAO,EAAEV,cAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAXJ,qBAvBR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmDH;;GApEeL,S;;KAAAA,S","sourcesContent":["import { useContext } from 'react';\nimport {CountdownContext} from \"../contexts/CountdownContext\";\nimport styles from '../styles/components/Countdown.module.css';\n\nexport function Countdown(){\n\n    const {\n        minutes, \n        seconds, \n        hasFinished,\n         isActive, \n         startCountdown, \n         resetCountdown\n        } = useContext(CountdownContext);\n\n    // Transformar minutes e secunds em String\n    // padStart -> Se não tiver 2 caracter adicione um 0\n    // split -> reparti em duas strings por exemplo: '2' '5'\n    const [minuteLeft, minuteRight] = String(minutes).padStart(2, '0').split('');\n    const [secondLeft, secondRight] = String(seconds).padStart(2, '0').split('');\n\n    return(\n        <div>\n            <div className={styles.countdownContainer}>\n                <div>\n                    <span>{minuteLeft}</span>\n                    <span>{minuteRight}</span>\n                </div>\n                <span>:</span>\n                <div>\n                    <span>{secondLeft}</span>\n                    <span>{secondRight}</span>\n                </div>\n            </div>\n\n            {hasFinished ? (\n                <button \n                disabled\n                type=\"button\" \n                className={styles.countdownButton}\n                onClick={resetCountdown}\n                >\n                Ciclo encerrado\n                </button>\n            ) : (\n                <>\n                    {isActive ? (\n                    <button \n                        type=\"button\" \n                        className={`${styles.countdownButton} ${styles.countdownButtonActive}`}\n                        // Quando clicar no button ativar a função resetCountdown\n                        onClick={resetCountdown}\n                        >\n                        Abandonar ciclo\n                    </button>\n                ) : (\n                    <button \n                        type=\"button\" \n                        className={styles.countdownButton}\n                        // Quando clicar no button ativar a função startCountDown\n                        onClick={startCountdown}\n                        >\n                        Iniciar um ciclo\n                    </button>\n                )}\n                </>\n            )}\n\n            \n           \n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}